<?php
/*
 * The MIT License (MIT)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
namespace Welhott\Cryptopals\Set2\Challenge11;

use Welhott\Cryptopals\Set1\Challenge7\Aes128Ecb;
use Welhott\Cryptopals\Set2\Challenge10\CbcMode;
use Welhott\Cryptopals\Set2\Challenge9\Pkcs7Padding;

/**
 * Class EcbCbcDetectionOracle
 * @package Welhott\Cryptopals\Set2\Challenge11
 */
class EcbCbcDetectionOracle
{
    /**
     * Generate a bunch of random bytes.
     * @param int $howMany The amount of bytes to generate.
     * @return string The generated bytes.
     */
    public static function generateRandomBytes(int $howMany = 16) : string
    {
        return openssl_random_pseudo_bytes($howMany);
    }

    /**
     * Enrypt a message using a randomized algorithm (CBC or ECB) and also append 5-10 random bytes to the beginning
     * and end of the message.
     * @param string $message
     * @return array
     */
    public static function encrypt(string $message) : array
    {
        $message = static::generateRandomBytes(mt_rand(5, 10)).$message.static::generateRandomBytes(mt_rand(5, 10));
        $algorithm = mt_rand(1, 2);

        if($algorithm == 1) {
            return ['algo' => 'ECB', 'message' => static::encryptECB($message)];
        }
        return ['algo' => 'CBC', 'message' => static::encryptCBC($message)];
    }

    /**
     * Encrypt the message with ECB mode.
     * @param string $message The message we want to encrypt.
     * @return string The ecrypted message with CBC.
     */
    private static function encryptECB(string $message) : string
    {
        return Aes128Ecb::encrypt($message, static::generateRandomBytes());
    }

    /**
     * Encrypt the message using CBC Mode.
     * @param string $message The message we want to encrypt.
     * @return string The encrypted message with CBC mode.
     */
    private static function encryptCBC(string $message) : string
    {
        return CbcMode::encrypt($message, Pkcs7Padding::pad('', '\0', 16), static::generateRandomBytes());
    }
}